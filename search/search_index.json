{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Duon Core Note This library is under active development, some of its features are still experimental and subject to change. Large parts of the documentation are missing. A lightweight web framework which utilizes PSR components. Basic usage use Duon\\Core\\App; use Duon\\Core\\Factory; use Duon\\Core\\Factory\\Guzzle; use Duon\\Core\\Request; use Duon\\Core\\Response; use Duon\\Router\\After; $factory = new Guzzle(); $afterHandler = new class ($factory) implements After { public function __construct(protected Factory $factory) {} public function handle(mixed $data): mixed { return Response::create($this->factory)->body($data); } public function replace(After $handler): bool { return false; } }; $app = App::create($factory); $app->get('/{param}', function (string $param) { return $param; })->after($afterHandler); $app->get('/', function (Request $request, Factory $factory) { $response = $factory->response(); $response->getBody()->write($request->origin()); return $response; }); $response = $app->run( $factory->serverRequest()->withUri( $factory->uri('https://example.org/'), ), ); assert((string) $response->getBody() === 'https://example.org'); $response = $app->run( $factory->serverRequest()->withUri( $factory->uri('https://example.com/test-string'), ), ); assert((string) $response->getBody() === 'test-string');","title":"Introduction"},{"location":"#duon-core","text":"Note This library is under active development, some of its features are still experimental and subject to change. Large parts of the documentation are missing. A lightweight web framework which utilizes PSR components.","title":"Duon Core"},{"location":"#basic-usage","text":"use Duon\\Core\\App; use Duon\\Core\\Factory; use Duon\\Core\\Factory\\Guzzle; use Duon\\Core\\Request; use Duon\\Core\\Response; use Duon\\Router\\After; $factory = new Guzzle(); $afterHandler = new class ($factory) implements After { public function __construct(protected Factory $factory) {} public function handle(mixed $data): mixed { return Response::create($this->factory)->body($data); } public function replace(After $handler): bool { return false; } }; $app = App::create($factory); $app->get('/{param}', function (string $param) { return $param; })->after($afterHandler); $app->get('/', function (Request $request, Factory $factory) { $response = $factory->response(); $response->getBody()->write($request->origin()); return $response; }); $response = $app->run( $factory->serverRequest()->withUri( $factory->uri('https://example.org/'), ), ); assert((string) $response->getBody() === 'https://example.org'); $response = $app->run( $factory->serverRequest()->withUri( $factory->uri('https://example.com/test-string'), ), ); assert((string) $response->getBody() === 'test-string');","title":"Basic usage"}]}